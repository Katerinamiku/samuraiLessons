{"version":3,"file":"static/js/63.058687e3.chunk.js","mappings":"6JACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,+BAA+B,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,YAAc,6BAA6B,MAAQ,uBAAuB,aAAe,+B,6BCQ7XA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAS,UAAKC,EAAAA,cAAL,YAAwBA,EAAAA,QAAtC,WACI,gBAAKC,IAAKC,EAAYC,IAAK,iBAE3B,UAAC,KAAD,CAASC,GAAIP,EAAb,cAAqBD,EAAMS,KAA3B,SAGX,ECVYC,EAAU,SAACV,GAEpB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMW,SAEzC,E,gDCNKC,GAAQC,EAAAA,EAAAA,IAAiB,IAoB/B,GAF0BC,EAAAA,EAAAA,GAAmC,CAACC,KAAM,wBAA1CD,EAjB6C,SAACd,GAEpE,OACI,0BACI,kBAAMgB,SAAUhB,EAAMiB,aAAcd,UAAWC,EAAAA,YAA/C,WACI,0BACI,SAACc,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXX,KAAM,iBACNY,YAAa,qBACbC,SAAU,CAACC,EAAAA,GAAeX,QAErC,SAACY,EAAA,EAAD,CAAQf,KAAM,OAAQgB,SAAU,WAAM,EAAGC,KAAM,cAI9D,I,wCCYD,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdoB,SAACC,GACrB,MAAO,CACHC,aAAcD,EAAMC,aAE3B,IACuB,SAACC,GACrB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAcD,GAC1B,EAER,IAG8CE,EAAAA,EAD/C,ECxBuB,SAACnC,GAEpB,IAAIoC,EAAkBpC,EAAM8B,aAAaO,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAACxC,EAAD,CAAYU,KAAM8B,EAAE9B,KAAiBP,GAAIqC,EAAErC,IAAZqC,EAAErC,GAArC,IAClDsC,EAAmBxC,EAAM8B,aAAaW,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAChC,EAAD,CAASC,QAAS+B,EAAE/B,QAAoBT,GAAIwC,EAAExC,IAAZwC,EAAExC,GAAxC,IAOxD,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKgC,KAEL,iBAAKjC,UAAWC,EAAAA,aAAhB,WACI,gBAAKD,UAAWC,EAAAA,SAAhB,SACKoC,KAEL,gBAAKrC,UAAWC,EAAAA,aAAhB,UAAgC,SAAC,EAAD,CAAmBY,SAdzC,SAAC2B,GACnB3C,EAAMgC,YAAYW,EAASV,gBAC3BU,EAASV,eAAiB,EAC7B,WAgBJ,G","sources":["webpack://samurai/./src/components/Dialogs/Dialogs.module.scss?d037","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Textarea/TextArea.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__i9inD\",\"friendsBlock\":\"Dialogs_friendsBlock__V9IQl\",\"dialogFriends\":\"Dialogs_dialogFriends__TJsR8\",\"messageBlock\":\"Dialogs_messageBlock__sbx1G\",\"messages\":\"Dialogs_messages__eA51b\",\"message\":\"Dialogs_message__AhreJ\",\"messageInput\":\"Dialogs_messageInput__+cja7\",\"messageForm\":\"Dialogs_messageForm__YkOZI\",\"error\":\"Dialogs_error__t5aIY\",\"errorMessage\":\"Dialogs_errorMessage__qBZiK\"};","import React from \"react\";\nimport s from '../Dialogs.module.scss'\nimport {NavLink} from \"react-router-dom\";\nimport userAvatar from \"../../../common/images/userAvatar.png\";\ntype DialogItemType = {\n    name: string\n    id: string\n}\n\nexport const DialogItem = (props: DialogItemType) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={`${s.dialogFriends} ${s.active}`}>\n            <img src={userAvatar} alt={'user' +\n                ' avatar'}/>\n            <NavLink to={path}> {props.name} </NavLink>\n        </div>\n    )\n}\n","import React from \"react\";\nimport s from '../Dialogs.module.scss'\n\ntype MessageType = {\n    message: string\n    id: string\n}\n\nexport const Message = (props:MessageType) => {\n\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {NewMessageFormPropsType} from \"../Dialogs\";\r\nimport {TextAreaCommon} from \"../../Common/FormsControls/TextAreaCommon\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utilites/validators\";\r\nimport {Button} from \"../../Common/Button/Button\";\r\nimport s from '../Dialogs.module.scss';\r\nconst max30 = maxLengthCreator(30)\r\nconst TextArea: React.FC<InjectedFormProps<NewMessageFormPropsType>> = (props) => {\r\n\r\n    return (\r\n        <div >\r\n            <form onSubmit={props.handleSubmit} className={s.messageForm}>\r\n                <div>\r\n                    <Field component={TextAreaCommon}\r\n                           name={'newMessageBody'}\r\n                           placeholder={'Enter your message'}\r\n                           validate={[requiredField, max30]}/>\r\n                </div>\r\n                <Button name={'Send'} callBack={()=>{}}  size={'large'}/>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TextAreaFromRedux = reduxForm<NewMessageFormPropsType>({form: 'dialogAddMessageForm'})(TextArea)\r\n\r\nexport default TextAreaFromRedux;\r\n\r\n","import React from \"react\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {MessagesPageType, SendMessageAC} from \"../../Redux/reducers/MessagesPageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../Redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\n\r\n//-------------------------HOC----------------------\r\n//создаем HOC над Dialogs который будет делать редирект: конт комп над конт комп - и уже передаем крайний конт комп дальше в connect\r\n\r\n\r\n//-----------------------connect----------------------\r\n//конткйнер может принимать все данные вскючая стор и передвать что нужно презентационной\r\ntype MapStateToPropsType = {\r\n    messagesPage: MessagesPageType\r\n}\r\ntype DispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & DispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\nconst dispatchToProps = (dispatch: Dispatch): DispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(SendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, dispatchToProps), withAuthRedirect) (Dialogs)\r\n\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.scss'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport TextAreaFromRedux from \"./Textarea/TextArea\";\r\n\r\nexport type NewMessageFormPropsType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.messagesPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = props.messagesPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n    const addNewMessage = (formData: NewMessageFormPropsType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n        formData.newMessageBody = '';\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.friendsBlock}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messageBlock}>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <div className={s.messageInput}><TextAreaFromRedux onSubmit={addNewMessage}/></div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n"],"names":["DialogItem","props","path","id","className","s","src","userAvatar","alt","to","name","Message","message","max30","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","TextAreaCommon","placeholder","validate","requiredField","Button","callBack","size","compose","connect","state","messagesPage","dispatch","sendMessage","newMessageBody","SendMessageAC","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData"],"sourceRoot":""}